import os
from dotenv import load_dotenv
import weaviate
from weaviate.classes.init import Auth
from langchain_weaviate import WeaviateVectorStore
from weaviate.classes.query import HybridFusion
from langchain_ollama import OllamaEmbeddings
# from langchain_huggingface import HuggingFaceEmbeddings


load_dotenv()


weaviate_api_key = os.getenv("WEAVIATE_API_KEY")
collection_name = "LangchainStudy"
# print(weaviate.__version__)

weaviate_client = weaviate.connect_to_local(
    host="localhost",
    port=8080,
    grpc_port=50051,
    auth_credentials=Auth.api_key(weaviate_api_key)
)

if not weaviate_client.is_ready():
    print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Weaviate ‡πÑ‡∏î‡πâ! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Docker Container ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà")
    exit()

print("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Weaviate ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")

# model_name = "BAAI/bge-m3"
# model_kwargs = {"device": "cpu"}
# encode_kwargs = {"normalize_embeddings": True}
# hf = HuggingFaceEmbeddings(
#     model_name=model_name, model_kwargs=model_kwargs, encode_kwargs=encode_kwargs
# )

# embeddings = hf
embeddings = OllamaEmbeddings(model="bge-m3")

try:
    db = WeaviateVectorStore(
        client=weaviate_client,
        index_name=collection_name,
        text_key="content",  
        embedding=embeddings
    )
    print("‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö query ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!")

except Exception as e:
    print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ collection '{collection_name}' ‡πÑ‡∏î‡πâ: {e}")
    print("üí° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏ó‡∏≥ embedding ‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á")
    weaviate_client.close()
    exit()

def print_collections():
    collection = weaviate_client.collections.use(collection_name)
    response = collection.query.fetch_objects(
        include_vector=True,
        limit=1,
        return_properties=["source_file", "section_type", "chunk_id"]
    )
    for o in response.objects:
        print(f"{o.uuid}\n")
        print(o.vector)
        print(f"{o.properties}\n\n")


def hybrid_search_RRF(query, k=5):

    collection = weaviate_client.collections.get(collection_name)
    query_vector = embeddings.embed_query(query)
    response = collection.query.hybrid(
        query=query,
        vector=query_vector,
        fusion_type=HybridFusion.RANKED,
        limit=k,
        return_metadata=['score']
    )
        
    results = []
    for obj in response.objects:
    # ‡∏î‡∏∂‡∏á metadata ‡∏à‡∏≤‡∏Å properties
        properties = obj.properties
        metadata = {
            'source_file': properties.get('source_file', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'),
            'full_path': properties.get('full_path', ''),
            'chunk_id': properties.get('chunk_id', ''),
            'section_type': properties.get('section_type', '')
        }
            
        results.append({
            'content': properties.get('content', ''),  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å 'text' ‡πÄ‡∏õ‡πá‡∏ô 'content'
            'metadata': metadata,
            'score': obj.metadata.score if obj.metadata.score else 0
        })
    return results

def hybrid_search_alpha(query, alpha=0.5, k=5):
    collection = weaviate_client.collections.get(collection_name)
    query_vector = embeddings.embed_query(query)
    response = collection.query.hybrid(
        query=query,
        vector=query_vector,
        alpha=alpha,  # ‡πÉ‡∏ä‡πâ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á dense ‡∏Å‡∏±‡∏ö sparse
        limit=k,
        return_metadata=['score']
    )

    results = []
    for obj in response.objects:
        properties = obj.properties
        metadata = {
            'source_file': properties.get('source_file', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'),
            'full_path': properties.get('full_path', ''),
            'chunk_id': properties.get('chunk_id', ''),
            'section_type': properties.get('section_type', '')
        }

        results.append({
            'content': properties.get('content', ''),
            'metadata': metadata,
            'score': obj.metadata.score if obj.metadata.score else 0
        })
    return results

# # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
def display_results(results, search_type, query):
    """‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤"""
    print(f"\n{'='*20} {search_type} {'='*20}")
    print(f"üîç ‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤: '{query}'")
    
    if not results:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå")
        return
    
    print(f"üìÑ ‡∏û‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå {len(results)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£:")
    
    for i, result in enumerate(results, 1):
        source_file = result['metadata'].get('source_file', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')
        chunk_id = result['metadata'].get('chunk_id', '')
        section_type = result['metadata'].get('section_type', '')
        score = result.get('score', 0)
        content = result['content']
        
        print(f"\nüìã ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà {i}")
        print(f"   ‡πÑ‡∏ü‡∏•‡πå: {source_file}")
        if chunk_id:
            print(f"   Chunk: {chunk_id}")
        if section_type:
            print(f"   Section: {section_type}")
        print(f"   Score: {score:.4f}")
        print("-" * 50)
        print(content)
        print("-" * 50)

def compare_hybrid_scores(query, alpha=0.5, k=5):
    print(f"\nüîç ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö Hybrid Search: Alpha vs RRF")
    print(f"‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤: '{query}'\n{'='*60}")

    results_alpha = hybrid_search_alpha(query, alpha=alpha, k=k)
    results_rrf = hybrid_search_RRF(query, k=k)

    print(f"\n{'‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å Hybrid Alpha':^60}")
    print("-"*60)
    for i, r in enumerate(results_alpha, 1):
        content_preview = (r['content'][:100] + "...") if len(r['content']) > 100 else r['content']
        print(f"{i}. Score: {r['score']:.4f} | Source: {r['metadata'].get('source_file', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')}")
        print(f"   üìù {content_preview}")

    print(f"\n{'‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å Hybrid RRF':^60}")
    print("-"*60)
    for i, r in enumerate(results_rrf, 1):
        content_preview = (r['content'][:100] + "...") if len(r['content']) > 100 else r['content']
        print(f"{i}. Score: {r['score']:.4f} | Source: {r['metadata'].get('source_file', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')}")
        print(f"   üìù {content_preview}")

print_collections()
query = "‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏§‡∏î‡∏π‡∏´‡∏ô‡∏≤‡∏ß‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢‡∏°‡∏±‡∏Å‡πÄ‡∏Å‡∏¥‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ù‡∏∏‡πà‡∏ô PM2.5 ‡∏™‡∏∞‡∏™‡∏°‡πÉ‡∏ô‡∏≠‡∏≤‡∏Å‡∏≤‡∏® ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏ó‡∏µ‡πà‡∏ô‡∏¥‡πà‡∏á‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ú‡∏≤‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏•‡πà‡∏á ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏î‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏ï‡πà‡∏≠‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô ‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡∏°‡∏≤‡∏ï‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏¥‡∏á‡∏£‡∏∏‡∏Å‡∏à‡∏≤‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏†‡∏≤‡∏Ñ‡∏£‡∏±‡∏ê‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô ‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô ‡∏Å‡∏≤‡∏£‡∏•‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏ô‡∏™‡πà‡∏á‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡∏™‡∏∞‡∏≠‡∏≤‡∏î"
compare_hybrid_scores(query, alpha=0.5, k=5)

# ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
weaviate_client.close()
print("üîí ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß")